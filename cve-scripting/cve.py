import requests
from requests.auth import HTTPBasicAuth
import time
from dotenv import load_dotenv
import os
import json

load_dotenv()
nvd_nist_api_key = os.getenv('NVDAPIKEY')
username = os.getenv('OPENCVEUSER')
password = os.getenv('OPENCVEPW')
headers = {"apiKey":f"{nvd_nist_api_key}"}

opencve_api_url = "https://www.opencve.io/api/cve?search=Kubernetes&page="
nvd_nist_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId="
page=1

cve_ids = []
cve_scores = []
start=0
end=19

while True: 
    try:
        response = requests.get(opencve_api_url + str(page), auth=HTTPBasicAuth(username, password))

        if response.status_code == 404:
            print("Received a 404 response. Stopping the loop.")
            break

        if response.status_code == 200:
            data = response.json()
            for entry in data:
              cve_ids.append(entry["id"])
            
            print (cve_ids)
            
            for i in range(start, len(cve_ids)):
              time.sleep(1) #because rate limit
              print("Fetching data for: " + cve_ids[i])
              res = requests.get(nvd_nist_api_url + cve_ids[i], headers=headers )
              if res.status_code == 200:
                  print("Success")
                  data = res.json()
                  if "cvssMetricV31" in data["vulnerabilities"][0]["cve"]["metrics"]:
                      cve_scores.append(data["vulnerabilities"][0]["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["baseScore"])
                  elif "cvssMetricV30" in data["vulnerabilities"][0]["cve"]["metrics"]:
                      cve_scores.append(data["vulnerabilities"][0]["cve"]["metrics"]["cvssMetricV30"][0]["cvssData"]["baseScore"])
                  elif "cvssMetricV2" in data["vulnerabilities"][0]["cve"]["metrics"]:
                      cve_scores.append(data["vulnerabilities"][0]["cve"]["metrics"]["cvssMetricV2"][0]["cvssData"]["baseScore"])
                  else:
                      cve_scores.append(0)
              else:
                  cve_scores.append(0)
                  print(f"Request failed with status code: {res.status_code}")
            print("After page: "+str(page))
            print(len(cve_ids))
            print(len(cve_scores))
            print("We have collected "+str(len(cve_ids))+ " CVEs")
            page += 1
            start += 20 #results are returned in batches of size 20
            end += 20

        else:
            print(f"Request failed with status code: {response.status_code}")

    except requests.exceptions.RequestException as e:
        print(f"Request error: {e}")

print("Length of our arrays")
print(len(cve_ids))
print(len(cve_scores))

data_dict = {cve_ids[i]: cve_scores[i] for i in range(len(cve_ids))}
with open("output_k8.json", "w") as json_file:
    json.dump(data_dict, json_file)

#We now have 2 arrays: cve_ids and cve_scores, whereby cve_ids[x] has a CVE base score of cve_scores[x])
#We filter all CVE's with a score > 7:

index=0
filtered_scores=[]
filtered_cves=[]
for score in cve_scores:
    if score >= 7:
        filtered_scores.append(score)
        filtered_cves.append(cve_ids[index])
    index += 1

print("All CVE's with a baseScore higher or equal than 7")
print(filtered_scores)
print(filtered_cves)







#Rate Limits, from https://nvd.nist.gov/developers/start-here
#NIST firewall rules put in place to prevent denial of service attacks can 
#thwart your application if it exceeds a predetermined rate limit. The public 
# rate limit (without an API key) is 5 requests in a rolling 30 second window; 
# the rate limit with an API key is 50 requests in a rolling 30 second window. 
# Requesting an API key significantly raises the number of requests that can be 
# made in a given time frame. However, it is still recommended that your 
# application sleeps for several seconds between requests so that legitimate 
# requests are not denied, and all requests are responded to in sequence.